{"version":3,"sources":["App.module.css","Button.module.css","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","add","num","filterValue","onIncClick","setState","onResetClick","render","Inc","Res","className","style","counterTask","counter","all","red","tablo","buttons","incriment","onClick","s","reset","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,YAAc,yBAAyB,IAAM,iBAAiB,QAAU,qBAAqB,MAAQ,mBAAmB,IAAM,iBAAiB,QAAU,qBAAqB,UAAY,uBAAuB,IAAM,iBAAiB,MAAQ,mBAAmB,IAAM,iBAAiB,gBAAgB,6B,gBCA5TD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,IAAM,oBAAoB,IAAM,oBAAoB,gBAAgB,gC,4ECDxHD,EAAOC,QAAU,IAA0B,kC,6ICgD5BC,E,4MA1CbC,MAAQ,CACJC,IAAI,GACJC,IAAK,EACLC,YAAa,O,EAMfC,WAAa,WACX,IAAIF,EAAM,EAAKF,MAAME,IACnBA,EAAM,GAAKA,IACX,EAAKG,SAAS,CAACH,IAAIA,K,EAEvBI,aAAe,WACX,EAAKD,SAAS,CAACH,IAAI,K,EAEvBK,OAAS,WAEL,IAAIC,EAAiC,QAA3B,EAAKR,MAAMG,YAAwB,gBAAkB,GAC3DM,EAAiC,QAA3B,EAAKT,MAAMG,YAAwB,gBAAkB,GAE/D,OACI,yBAAKO,UAAWC,IAAMC,aAClB,yBAAKF,UAAWC,IAAME,SAClB,yBAAKH,UAAWC,IAAMG,KAC1B,yBAAKJ,UAA2B,GAAhB,EAAKV,MAAME,IAAOS,IAAMI,IAAIJ,IAAMK,OAAO,8BAAO,EAAKhB,MAAME,IAAlB,MACzD,yBAAKQ,UAAWC,IAAMM,SAClB,yBAAKP,UAAWC,IAAMO,WAC1B,4BAAQC,QAAW,EAAKf,WAAYM,UAAWU,IAAEZ,IAAK,IAAKY,IAAEZ,IAA7D,QAEI,yBAAKE,UAAYC,IAAMU,OAC3B,4BAAQF,QAAS,EAAKb,aAAcI,UAAWU,IAAEX,IAAM,IAAMW,IAAEX,IAA/D,e,YAjCEa,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAStB,OACP,kBAAC,IAAMuB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a5eec2e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterTask\":\"App_counterTask__2j6F0\",\"all\":\"App_all__VUmMq\",\"counter\":\"App_counter__3JCnh\",\"tablo\":\"App_tablo__tc2b7\",\"red\":\"App_red__1nyMg\",\"buttons\":\"App_buttons__27jY7\",\"incriment\":\"App_incriment__2qsqO\",\"Inc\":\"App_Inc__Y_2eH\",\"reset\":\"App_reset__DORXG\",\"Res\":\"App_Res__3ViWA\",\"filter-active\":\"App_filter-active__6U9l7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Button_buttons__3XXPB\",\"Inc\":\"Button_Inc__1xkEH\",\"Res\":\"Button_Res__3FVpH\",\"filter-active\":\"Button_filter-active__2cFYg\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport style from './App.module.css';\nimport s from './Button.module.css'\n\nclass App extends React.Component {\n  state = {\n      add:[],\n      num: 0,\n      filterValue: \"Res\"\n  }\n\n\n\n\n    onIncClick = () => {\n      let num = this.state.num\n        num < 5 && num++\n        this.setState({num:num})\n    };\n    onResetClick = () => {\n        this.setState({num:0})\n    };\n    render = () => {\n        debugger\n        let Inc = this.state.filterValue === \"Inc\" ? \"filter-active\" : \"\";\n        let Res = this.state.filterValue === \"Res\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className={style.counterTask}>\n                <div className={style.counter}>\n                    <div className={style.all}>\n                <div className={this.state.num==5?style.red:style.tablo}><span>{this.state.num} </span></div>\n                <div className={style.buttons}>\n                    <div className={style.incriment}>\n                <button onClick = {this.onIncClick} className={s.Inc +' '+ s[Inc]}>inc</button>\n                    </div>\n                    <div className= {style.reset}>\n                <button onClick={this.onResetClick} className={s.Res + ' ' + s[Res]}>reset</button>\n                    </div>\n                </div>\n                </div>\n            </div>\n            </div>\n        );\n    }}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}